syntax = "proto3";

package protobuf;

option java_multiple_files = true;
option java_package = "net.discdd.grpc";

enum Status {
  UNDEFINED = 0;
  SUCCESS = 1;
  FAILED = 2;
}


enum BundleSenderType {
  UNKNOWN = 0;
  CLIENT = 1;
  TRANSPORT = 2;
  SERVER = 3;
}


message EncryptedBundleId {
  string encryptedId = 1;
}

/*
 * The bundle will be chunked into smaller pieces for transmission.
 * Multiple chunks will be sent until the whole bundle has been transmitted.
 */
message BundleChunk {
  bytes chunk = 1;
}

/*
 * The first upload message will be the EncryptedBundleId followed by a
 * stream of chunks.
 */
message BundleUploadRequest {
  oneof request {
    EncryptedBundleId bundleId = 1;
    BundleChunk chunk = 2;
    BundleSenderType senderType = 3;
  }
}

message BundleUploadResponse {
  Status status = 1;
}

message BundleDownloadResponse {
  oneof request {
    BundleChunk chunk = 2;
  }
}

message BundleDownloadRequest {
  EncryptedBundleId bundleId = 1;
  BundleSenderType senderType = 2;
  optional PublicKeyMap publicKeyMap = 3;
}

// the prefixed names is stupid, but recommend https://protobuf.dev/programming-guides/style/#enums
enum RecencyBlobStatus {
    RECENCY_BLOB_STATUS_UNDEFINED = 0;
    RECENCY_BLOB_STATUS_SUCCESS = 1;
    RECENCY_BLOB_STATUS_FAILED = 2;
}

message RecencyBlob {
  int32 version = 1;
  int32 nonce = 2;
  // milliseconds since epoch (1/1/1970 UTC) https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#currentTimeMillis--
  int64 blobTimestamp = 3;
  string senderId = 5;
}

message PublicKeyMap {
  bytes clientPub = 1;
  bytes signedTLSPub = 2;
}

message GetRecencyBlobRequest {
}

message GetRecencyBlobResponse {
  RecencyBlobStatus status = 1;
  RecencyBlob recencyBlob = 2;
  bytes recencyBlobSignature = 4;
  bytes serverPublicKey = 3;
}

service BundleExchangeService {
  rpc uploadBundle(stream BundleUploadRequest) returns (BundleUploadResponse) {}
  rpc downloadBundle(BundleDownloadRequest) returns (stream BundleDownloadResponse) {}
  rpc getRecencyBlob(GetRecencyBlobRequest) returns (GetRecencyBlobResponse) {}
}